//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities2 : DbContext
    {
        public Entities2()
            : base("name=Entities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CountryName> CountryNames { get; set; }
        public virtual DbSet<CustomerDetail> CustomerDetails { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual int AddImages(Nullable<int> productId, string imageName, string imageUrl)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var imageNameParameter = imageName != null ?
                new ObjectParameter("ImageName", imageName) :
                new ObjectParameter("ImageName", typeof(string));
    
            var imageUrlParameter = imageUrl != null ?
                new ObjectParameter("ImageUrl", imageUrl) :
                new ObjectParameter("ImageUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddImages", productIdParameter, imageNameParameter, imageUrlParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CategoryEntry(Nullable<int> categoryId, string categoryName)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CategoryEntry", categoryIdParameter, categoryNameParameter);
        }
    
        public virtual ObjectResult<CategoryFetch_Result> CategoryFetch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoryFetch_Result>("CategoryFetch");
        }
    
        public virtual ObjectResult<string> ChangeStatus(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ChangeStatus", customerIdParameter);
        }
    
        public virtual int CountryEntry(string countryName)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountryEntry", countryNameParameter);
        }
    
        public virtual ObjectResult<CountryFetch_Result> CountryFetch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountryFetch_Result>("CountryFetch");
        }
    
        public virtual int CustomerDeletion(Nullable<int> customerID, string name)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerDeletion", customerIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<CustomerEntry_Result> CustomerEntry(string name, string phNo, string email, Nullable<int> countryID, Nullable<int> stateID, string remarks, string createdDate, string gSTEnable, Nullable<int> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phNoParameter = phNo != null ?
                new ObjectParameter("PhNo", phNo) :
                new ObjectParameter("PhNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            var gSTEnableParameter = gSTEnable != null ?
                new ObjectParameter("GSTEnable", gSTEnable) :
                new ObjectParameter("GSTEnable", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerEntry_Result>("CustomerEntry", nameParameter, phNoParameter, emailParameter, countryIDParameter, stateIDParameter, remarksParameter, createdDateParameter, gSTEnableParameter, statusParameter);
        }
    
        public virtual ObjectResult<CustomerFetch_Result> CustomerFetch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerFetch_Result>("CustomerFetch");
        }
    
        public virtual ObjectResult<CustomerSearch_Result> CustomerSearch(string name, string phNo, string email)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phNoParameter = phNo != null ?
                new ObjectParameter("PhNo", phNo) :
                new ObjectParameter("PhNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerSearch_Result>("CustomerSearch", nameParameter, phNoParameter, emailParameter);
        }
    
        public virtual ObjectResult<CustomerSearchDate_Result> CustomerSearchDate(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerSearchDate_Result>("CustomerSearchDate", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<CustomerUpdate_Result> CustomerUpdate(Nullable<int> customerID, string name, string phNo, string email, Nullable<int> countryID, Nullable<int> stateID, string remarks, string createdDate, string gSTEnable)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phNoParameter = phNo != null ?
                new ObjectParameter("PhNo", phNo) :
                new ObjectParameter("PhNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            var gSTEnableParameter = gSTEnable != null ?
                new ObjectParameter("GSTEnable", gSTEnable) :
                new ObjectParameter("GSTEnable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerUpdate_Result>("CustomerUpdate", customerIDParameter, nameParameter, phNoParameter, emailParameter, countryIDParameter, stateIDParameter, remarksParameter, createdDateParameter, gSTEnableParameter);
        }
    
        public virtual int DeleteImages(Nullable<int> imageId)
        {
            var imageIdParameter = imageId.HasValue ?
                new ObjectParameter("ImageId", imageId) :
                new ObjectParameter("ImageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteImages", imageIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> FetchLastProductId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("FetchLastProductId");
        }
    
        public virtual ObjectResult<ImageFetch_Result> ImageFetch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImageFetch_Result>("ImageFetch");
        }
    
        public virtual int LoginEntry(string userName, string passWord, string name, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> createdDateTime, Nullable<byte> status)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginEntry", userNameParameter, passWordParameter, nameParameter, createdUserIDParameter, createdDateParameter, createdDateTimeParameter, statusParameter);
        }
    
        public virtual int LoginValidation(string userName, string passWord)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginValidation", userNameParameter, passWordParameter);
        }
    
        public virtual ObjectResult<ProductEntry_Result> ProductEntry(string title, string uniqueCode, Nullable<int> categoryId, Nullable<int> subCategoryId, string shortDescription, string description, Nullable<int> status)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var uniqueCodeParameter = uniqueCode != null ?
                new ObjectParameter("UniqueCode", uniqueCode) :
                new ObjectParameter("UniqueCode", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var shortDescriptionParameter = shortDescription != null ?
                new ObjectParameter("ShortDescription", shortDescription) :
                new ObjectParameter("ShortDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductEntry_Result>("ProductEntry", titleParameter, uniqueCodeParameter, categoryIdParameter, subCategoryIdParameter, shortDescriptionParameter, descriptionParameter, statusParameter);
        }
    
        public virtual ObjectResult<ProductFetch_Result> ProductFetch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductFetch_Result>("ProductFetch");
        }
    
        public virtual ObjectResult<ProductSearch_Result> ProductSearch(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductSearch_Result>("ProductSearch", titleParameter);
        }
    
        public virtual ObjectResult<ProductUpdate_Result> ProductUpdate(Nullable<int> productId, string title, string uniquecode, Nullable<int> categoryId, Nullable<int> subCategoryId, string shortDescription, string description)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var uniquecodeParameter = uniquecode != null ?
                new ObjectParameter("Uniquecode", uniquecode) :
                new ObjectParameter("Uniquecode", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var shortDescriptionParameter = shortDescription != null ?
                new ObjectParameter("ShortDescription", shortDescription) :
                new ObjectParameter("ShortDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductUpdate_Result>("ProductUpdate", productIdParameter, titleParameter, uniquecodeParameter, categoryIdParameter, subCategoryIdParameter, shortDescriptionParameter, descriptionParameter);
        }
    
        public virtual int StateEntry(string stateName)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StateEntry", stateNameParameter);
        }
    
        public virtual ObjectResult<StateFetch_Result> StateFetch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StateFetch_Result>("StateFetch");
        }
    
        public virtual int StatusChange(Nullable<int> customerId, Nullable<byte> status)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StatusChange", customerIdParameter, statusParameter);
        }
    
        public virtual int StatusChangeProduct(Nullable<int> productId, Nullable<byte> status)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StatusChangeProduct", productIdParameter, statusParameter);
        }
    
        public virtual int SubCategoryEntry(Nullable<int> subId, string subCategoryName)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubCategoryEntry", subIdParameter, subCategoryNameParameter);
        }
    
        public virtual ObjectResult<SubCategoryFetch_Result> SubCategoryFetch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubCategoryFetch_Result>("SubCategoryFetch");
        }
    }
}
